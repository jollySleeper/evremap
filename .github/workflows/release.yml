name: Create Releases And Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu,aarch64-unknown-linux-gnu,x86_64-unknown-linux-musl,aarch64-unknown-linux-musl
          components: rustfmt,clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "release-build"
          cache-on-failure: true

      - name: Install Linux Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libevdev-dev pkg-config musl-tools gcc-aarch64-linux-gnu musl-dev
          sudo ln -s /usr/bin/aarch64-linux-gnu-gcc /usr/bin/aarch64-linux-musl-gcc

      - name: Run tests
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: true
          RUSTFLAGS: "-C target-cpu=native -C opt-level=3"
        run: cargo test --verbose --release --all-features --jobs $(nproc)

      - name: Build all targets
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: true
          RUSTFLAGS: "-C opt-level=3 -C lto=thin"
        run: |
          # Build GNU targets
          cargo build --verbose --release --target x86_64-unknown-linux-gnu --jobs $(nproc)
          cargo build --verbose --release --target aarch64-unknown-linux-gnu --jobs $(nproc) --config target.aarch64-unknown-linux-gnu.linker=\"aarch64-linux-gnu-gcc\"
          
          # Build MUSL targets (static binaries)
          cargo build --verbose --release --target x86_64-unknown-linux-musl --jobs $(nproc)
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-musl-gcc \
          cargo build --verbose --release --target aarch64-unknown-linux-musl --jobs $(nproc)

      - name: Strip binaries
        run: |
          # Strip GNU binaries
          strip target/x86_64-unknown-linux-gnu/release/evremap
          aarch64-linux-gnu-strip target/aarch64-unknown-linux-gnu/release/evremap
          
          # Strip MUSL binaries
          strip target/x86_64-unknown-linux-musl/release/evremap
          aarch64-linux-gnu-strip target/aarch64-unknown-linux-musl/release/evremap

      - name: Archive source code as tar.gz
        run: |
          mkdir -p target/source
          git archive --format=tar.gz -o target/source/evremap-${{ github.ref_name }}.tar.gz HEAD

      - name: Archive source code as zip
        run: |
          mkdir -p target/source
          git archive --format=zip -o target/source/evremap-${{ github.ref_name }}.zip HEAD

      - name: Create GitHub release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: ''
          draft: false
          prerelease: false

      - name: Upload x86_64-unknown-linux-gnu binary
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: target/x86_64-unknown-linux-gnu/release/evremap
          asset_name: evremap-x86_64-unknown-linux-gnu
          asset_content_type: application/octet-stream

      - name: Upload aarch64-unknown-linux-gnu binary
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: target/aarch64-unknown-linux-gnu/release/evremap
          asset_name: evremap-aarch64-unknown-linux-gnu
          asset_content_type: application/octet-stream

      - name: Upload x86_64-unknown-linux-musl binary (static)
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: target/x86_64-unknown-linux-musl/release/evremap
          asset_name: evremap-x86_64-unknown-linux-musl
          asset_content_type: application/octet-stream

      - name: Upload aarch64-unknown-linux-musl binary (static)
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: target/aarch64-unknown-linux-musl/release/evremap
          asset_name: evremap-aarch64-unknown-linux-musl
          asset_content_type: application/octet-stream

      - name: Upload tar.gz source archive
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: target/source/evremap-${{ github.ref_name }}.tar.gz
          asset_name: evremap-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload zip source archive
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: target/source/evremap-${{ github.ref_name }}.zip
          asset_name: evremap-${{ github.ref_name }}.zip
          asset_content_type: application/zip

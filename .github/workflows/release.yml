name: Create Releases And Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Create GitHub release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## evremap ${{ github.ref_name }}
            
            ### Available Builds:
            - x86_64 Linux (GNU libc)
            - aarch64 Linux (GNU libc)
            - x86_64 Linux (MUSL, static)
            - aarch64 Linux (MUSL, static)
            
            Source code is available in both .tar.gz and .zip formats.
          draft: false
          prerelease: false

  build-gnu:
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate cache key
        id: cache_key
        run: echo "key=$(md5sum Cargo.lock | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu,aarch64-unknown-linux-gnu
          components: rustfmt,clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "release-build-gnu-${{ steps.cache_key.outputs.key }}"
          cache-on-failure: true

      - name: Install Linux Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libevdev-dev \
            pkg-config \
            gcc-aarch64-linux-gnu

      - name: Build and test GNU targets
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: true
          RUSTFLAGS: "-C opt-level=3 -C embed-bitcode=yes -C target-cpu=native"
        run: |
          # Run tests on native target
          cargo test --verbose --release --all-features --jobs $(nproc)
          
          # Build GNU targets
          cargo build --verbose --release --target x86_64-unknown-linux-gnu --jobs $(nproc)
          cargo build --verbose --release --target aarch64-unknown-linux-gnu --jobs $(nproc) --config target.aarch64-unknown-linux-gnu.linker=\"aarch64-linux-gnu-gcc\"

      - name: Strip binaries
        run: |
          strip target/x86_64-unknown-linux-gnu/release/evremap
          aarch64-linux-gnu-strip target/aarch64-unknown-linux-gnu/release/evremap

      - name: Upload binaries
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/x86_64-unknown-linux-gnu/release/evremap
          asset_name: evremap-${{ github.ref_name }}-x86_64-linux-gnu
          asset_content_type: application/octet-stream

      - name: Upload aarch64 binary
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/aarch64-unknown-linux-gnu/release/evremap
          asset_name: evremap-${{ github.ref_name }}-aarch64-linux-gnu
          asset_content_type: application/octet-stream

  build-musl:
    needs: create-release
    runs-on: ubuntu-latest
    container:
      image: rust:1.87.0-alpine3.22
    permissions:
      contents: write
    steps:
      - name: Setup APK cache
        uses: actions/cache@v3
        with:
          path: /var/cache/apk
          key: alpine-apk-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install build dependencies
        run: |
          apk add --no-cache \
            build-base \
            git \
            linux-headers \
            libevdev-dev \
            pkgconfig \
            musl-dev \
            gcc-aarch64-linux-musl \
            openssl-dev \
            perl

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate cache key
        id: cache_key
        run: echo "key=$(md5sum Cargo.lock | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "release-build-musl-${{ steps.cache_key.outputs.key }}"
          cache-on-failure: true

      - name: Build MUSL targets
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: true
          # Updated flags for Rust 1.87
          RUSTFLAGS: "-C opt-level=3 -C embed-bitcode=yes -C target-feature=+crt-static -C codegen-units=1 -C panic=abort"
        run: |
          # Build MUSL targets
          cargo build --verbose --release --target x86_64-unknown-linux-musl --jobs $(nproc)
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-musl-gcc \
          cargo build --verbose --release --target aarch64-unknown-linux-musl --jobs $(nproc)

      - name: Strip binaries
        run: |
          strip target/x86_64-unknown-linux-musl/release/evremap
          aarch64-linux-musl-strip target/aarch64-unknown-linux-musl/release/evremap

      - name: Verify static linking
        run: |
          file target/x86_64-unknown-linux-musl/release/evremap | grep "statically linked"
          file target/aarch64-unknown-linux-musl/release/evremap | grep "statically linked"

      - name: Upload binaries
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/x86_64-unknown-linux-musl/release/evremap
          asset_name: evremap-${{ github.ref_name }}-x86_64-linux-musl-static
          asset_content_type: application/octet-stream

      - name: Upload aarch64 binary
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/aarch64-unknown-linux-musl/release/evremap
          asset_name: evremap-${{ github.ref_name }}-aarch64-linux-musl-static
          asset_content_type: application/octet-stream

  create-source-archives:
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create source archives
        run: |
          mkdir -p target/source
          git archive --format=tar.gz -o target/source/evremap-${{ github.ref_name }}-source.tar.gz HEAD
          git archive --format=zip -o target/source/evremap-${{ github.ref_name }}-source.zip HEAD

      - name: Upload archives
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/source/evremap-${{ github.ref_name }}-source.tar.gz
          asset_name: evremap-${{ github.ref_name }}-source.tar.gz
          asset_content_type: application/gzip

      - name: Upload zip archive
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/source/evremap-${{ github.ref_name }}-source.zip
          asset_name: evremap-${{ github.ref_name }}-source.zip
          asset_content_type: application/zip
